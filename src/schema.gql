type Query {
    me: User!
    post: Post!
    comments: [Comment!]!
    users(query: String): [User!]!
    posts(query: String): [Post!]!
}

type Mutation {
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): User!

    createPost(input: PostInput!): Post!
    updatePost(id: ID! input: UpdatePostInput!): Post!
    deletePost(id: ID!): Post!

    createComment(input: CommentInput!): Comment!
    updateComment(id: ID! input: UpdateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
}

type Subscription {
    count: Int!
    comment(postID: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

input UserInput {
    id: ID
    name: String!
    email: String!
    age: Int
}
input UpdateUserInput {
    name: String
    email: String
    age: Int
}

input PostInput {
    id: ID
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}
input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CommentInput {
    id: ID
    text: String!
    author: ID!
    post: ID!
}
input UpdateCommentInput {
    text: String
    author: ID
    post: ID
}

type User {
    id: ID!
    name: String!
    email: String!
    age: Int
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}
type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}
type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}