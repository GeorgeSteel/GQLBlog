scalar createDate

type Query {
  users(query: String): [User!]!
  singleUser(id: String): User!
  children: [Child!]!
}

# type Mutation {
#     createUser(input: UserInput!): User!
#     updateUser(id: ID!, input: UpdateUserInput!): User!
#     deleteUser(id: ID!): User!
# }

# type Subscription {
#     count: Int!
#     post: PostSubscriptionPayload!
# }

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  createdAt: Int!
  medicalHistory: [String]!
  children: [Child]!
}
# input UserInput {
#     id: ID
#     name: String!
#     email: String!
#     age: Int
#     medicalhistory: [String!]!
# }
# input UpdateUserInput {
#     name: String
#     email: String
#     age: Int
#     medicalhistory: [String!]!
#     children: [Child!]!
# }

type Child {
  id: ID!
  name: String!
  age: Int!
  parent: User!
}

# type PostSubscriptionPayload {
#     mutation: MutationType!
#     data: Post!
# }

# enum MutationType {
#     CREATED
#     UPDATED
#     DELETED
# }
